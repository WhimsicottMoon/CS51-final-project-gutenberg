Hello - from /home/aalias/.atom/packages/ide-reason/rls/rls-linux-1.5.2.exe
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"format_width":80,"autoRebuild":true,"per_value_codelens":false,"dependencies_codelens":false,"opens_codelens":false}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","languageId":"ocaml","version":1,"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":2},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":3},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":4},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":5,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":6,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":35,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":34,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":26,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":27,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":28,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":28,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0638961791992ms
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":22,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0369548797607ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":31,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":32,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":33,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":41,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0250339508057ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":42,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":53,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":125,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":79,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":80,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":105,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0278949737549ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":72,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":95,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":97,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":99,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":84,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":85,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":113,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":114,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":115,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":116,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":118,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":110,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":125,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":84,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0300407409668ms
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":115,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":118,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":97,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":97,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":89,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":112,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":113,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":60}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":61}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":63}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":97,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":110,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":110,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":110,"character":1}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":110,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":105,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":118,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0500679016113ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":119,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":122,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":123,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":110,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":109,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":103,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0271797180176ms
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":0}}}
[server] Got a method textDocument/definition
[server] processing took 0.00596046447754ms
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":5},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\n\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":6},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":100,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0269412994385ms
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0171661376953ms
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":7},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\n\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00476837158203ms
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":8},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0271797180176ms
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00905990600586ms
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0200271606445ms
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":19}}}
[server] Got a method textDocument/definition
[server] processing took 0.00381469726562ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00905990600586ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":131,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":95,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":103,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":103,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":103,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":105,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0250339508057ms
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":1}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":71}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0178813934326ms
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":84}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0319480895996ms
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":85}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":93}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":102}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":101}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":95,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0112056732178ms
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":71}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":67}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":67}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":1}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":106}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":105}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":98}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":71}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":71}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":115,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":116,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":123,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":123,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":136,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00476837158203ms
Sending response {"id": 157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":146,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":145,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":122,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":109,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":110,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 167, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":121,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":119,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":121,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":122,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":122,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":121,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":82}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":121,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00476837158203ms
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":76}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":82}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":83}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 185, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":122,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":122,"character":67}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":115,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":115,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":114,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":87,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":84,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":123,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":37}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00476837158203ms
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":56}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":57}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":58}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":59}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":120,"character":58}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 207, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":114,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":114,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":109,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":109,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":109,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":109,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":9},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":10},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":11},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n \nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":12},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":13},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":14},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each boo\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":15},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each bo\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":16},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each b\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":17},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each \nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":18},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":19},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with eac\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":20},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with ea\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":21},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with e\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":22},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with \nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":23},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":24},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color wit\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":25},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color wi\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":26},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color w\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":27},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color \nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":61}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":28},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":43}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":29},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":30},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":31},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\n\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":31}}}
[server] Got a method textDocument/definition
[server] processing took 0.00381469726562ms
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":28}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":103,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":32},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":33},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\n\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0288486480713ms
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":34},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":10}}}
[server] Got a method textDocument/definition
[server] processing took 0.00309944152832ms
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":35},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\n\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":36},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\n\nplinit ();\n\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":103,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":37},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\n\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":103,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":38},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":100,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":6}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00882148742676ms
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":109,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":119,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":118,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":134,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":138,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 252, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":123,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":134,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00476837158203ms
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":144,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":143,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 260, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":138,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":141,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":123,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0147819519043ms
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":125,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0600814819336ms
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":131,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":131,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":123,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":125,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":136,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":143,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":136,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":125,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":134,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":136,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":137,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":138,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":136,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":137,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":146,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":134,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":134,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":19,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 299, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":20,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":21,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":22,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":23,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":24,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 304, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":25,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":24,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0231266021729ms
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":20,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":26,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":27,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":28,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 312, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":28,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":11,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":28,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 317, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":30,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":31,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 320, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":30,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":73}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0519752502441ms
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":31,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 325, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":30,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":38,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":40,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 329, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":41,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":42,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":41,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":40,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 336, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":37,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":38,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":38,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":38,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":38,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":38,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":40,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":41,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":41,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":41,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":41,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":40,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":32,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 350, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":31,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":30,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":28,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 355, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":35,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":36,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 357, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":37,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":39},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done}\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 360, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":40},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done}}\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":41},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done}}}\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplinit ();\nplsdiori 1.0;\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":39,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 363, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 364, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":33,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":32,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":6,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":30,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":46,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 371, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":49,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":48,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":30,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":35,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":42,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":35,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 377, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":34,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":22,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":23,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":23,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":23,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":24,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0269412994385ms
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":44,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":53,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":57,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 388, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":56,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":30,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":29,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":28,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":19,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 393, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":18,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 394, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 396, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":46,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":43,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":34,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00882148742676ms
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
