Hello - from /home/aalias/.atom/packages/ide-reason/rls/rls-linux-1.5.2.exe
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"format_width":80,"autoRebuild":true,"per_value_codelens":false,"dependencies_codelens":false,"opens_codelens":false}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","languageId":"ocaml","version":1,"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":2},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":3},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":4,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":4,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":5,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00476837158203ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":63,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":78,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":92,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":102,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":116,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":145,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":144,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0429153442383ms
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":49}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0178813934326ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":145,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":144,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":142,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":141,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":4},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 .0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":5},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":137,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0438690185547ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":137,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":137,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":141,"character":25}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0250339508057ms
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":54}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":95,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":92,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":77,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0240802764893ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":74,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":73,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":59,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":89,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":99,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":111,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":121,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":139,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":145,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":144,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":121,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":99,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":87,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":84,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0178813934326ms
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":81,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":72,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":64,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":53,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":47,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":46,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":47,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":57,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":58,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":63,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":64,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":65,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":72,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":73,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":86,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":95,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":117,"character":52}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.30779838562ms
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":56}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0240802764893ms
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":6},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for %\") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":57}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":7},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for %s\") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":58}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":59}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":58}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.108957290649ms
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":8},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for %\") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":9},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \") ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":56}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":57}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":10},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":11},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":59}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":12},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ ) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":60}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":13},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ ()) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":61}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":14},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (L)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":15},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (Li)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":16},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (Lis)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":64},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":17},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":92}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":65},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":18},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":93}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":66},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":19},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.h)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":94}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":67},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":20},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.he)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":95}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":68},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":21},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hea)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":96}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":69},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":22},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.head)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":97}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":70},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":71}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":23},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hea)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":24},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.he)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":25},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.h)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":26},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd)) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":98}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":68},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":27},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd )) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":69}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":28},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd ())) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":29},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (S))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":30},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (St))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":31},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (Str))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":102}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":73},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":32},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (Stri))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":106}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":74},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":33},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (Strin))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":107}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":75},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":34},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":108}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":76},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":35},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":109}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":77},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":77}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":36},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.s))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":110}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":78},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":37},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.sp))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":112}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":79},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":38},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.spl))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":113}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":80},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":39},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.spli))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":114}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":81},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":40},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":115}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":82},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0379085540771ms
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":41},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":116}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":83},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":83}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.641107559204ms
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":42},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_o))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":117}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":84},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":43},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":119}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":85},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":85}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":44},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":120}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":86},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00476837158203ms
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":45},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_c))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":122}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":87},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":46},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_ch))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":123}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":88},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":47},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_cha))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":124}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":89},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":48},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":125}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":90},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":90}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0221729278564ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":49},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char ))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":91}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":50},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char  ))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":92}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":51},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char ))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":91}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":52},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char ''))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":92}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":53},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.'))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":126}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":93},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0178813934326ms
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":93}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":94}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":54},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' ))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":95}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":103,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":95}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":55},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' f))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":56},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' fi))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":57},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' fil))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":132}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":98},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":58},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":138}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":99},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":99}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":59},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":139}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":100},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":60},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_o))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":141}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":101},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":61},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":142}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":102},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":102}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":62},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":143}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":103},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":103}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":63},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_f))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":145}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":104},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0181198120117ms
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":64},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_fi))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":147}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":105},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":65},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_fil))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":148}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":106},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":66},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_file))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":149}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":107},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":67},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files))) ;\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":150}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":108},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":108}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00786781311035ms
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":105,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00619888305664ms
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":110}}}
[server] Got a method textDocument/hover
[server] processing took 0.00381469726562ms
Sending response {"id": 157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":110}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":111}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":110}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00691413879395ms
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":110,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":72}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":68},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":111}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":101,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 167, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":107,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":108,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":145,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":144,"character":62}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":131,"character":52}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":51}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":52}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0269412994385ms
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 185, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":131,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.028133392334ms
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":141,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":69},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE;]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":70},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; ]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":71},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; P]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":72},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":73},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":151}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":39},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":74},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_L]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":198}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":40},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":75},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_Le]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":200}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":41},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":76},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_Leg]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":201}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":42},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":77},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_Lege]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":202}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":43},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":78},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_Leg]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":79},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_Le]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":80},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_L]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":81},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":203}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":41},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 207, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":82},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEG]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":207}}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":42},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":83},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGE]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":208}}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":43},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":84},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEN]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":210}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":44},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":85},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":211}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":45},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":86},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":212}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":46},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":87},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_S]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":214}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":47},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":88},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_SY]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":216}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":48},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.032901763916ms
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":89},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_SYM]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":217}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":49},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":90},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_SYMB]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":219}}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":50},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0181198120117ms
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":91},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_SYMBO]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":221}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":51},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":92},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 5.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":222}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":52},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":52}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00786781311035ms
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":37}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0247955322266ms
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":131,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":131,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00476837158203ms
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":137,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":136,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":134,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":134,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":93},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 .0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":94},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = [| [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":131,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 252, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":34}}}
[server] Got a method textDocument/definition
[server] processing took 0.00691413879395ms
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":16}}}
[server] Got a method textDocument/definition
[server] processing took 0.00381469726562ms
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":95},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0[| [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 260, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":96},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0| [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":97},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0 [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] |] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":83}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":99}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":106}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":106}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":98},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0 [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] | in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":99},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0 [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] | in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":100},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0 [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]  in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":101},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0 [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]  in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":104}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":102},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0 [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":103}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":103}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":81}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":103},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.0[PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":104},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1.[PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":105},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l 1[PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":106},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":107},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ()[PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":108},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":109},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":100}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":100}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":110},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":111},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":101}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":101}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":135,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.079870223999ms
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":112},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL] [PL_LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":113},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL][PL_LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":114},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]PL_LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":115},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]L_LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":116},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]_LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":117},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":118},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]EGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":119},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]GEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":120},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]END_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":121},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]ND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":122},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]D_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":123},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":124},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":125},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]INE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":126},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]NE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":127},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]E; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":128},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":129},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL] PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":130},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":131},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]L_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":132},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":133},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":134},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]EGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":135},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]GEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":136},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]END_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":137},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]ND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":138},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]D_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":139},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":140},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":141},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]YMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":142},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]MBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":143},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]BOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":144},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]OL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":145},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]L]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":146},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":147},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL]) in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":148},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":149},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l ([PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":150},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":151},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":132,"character":30}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 299, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00715255737305ms
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.00381469726562ms
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Sending response {"id": 304, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":90,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":49}}}
[server] Got a method textDocument/hover
[server] processing took 0.0331401824951ms
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":152},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's aw for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":153},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":49}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 312, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":100,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 317, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":105,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":106,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 320, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":137,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.028133392334ms
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":124,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 325, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0197887420654ms
Sending response {"id": 329, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":87,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":61}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":61}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 336, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":70}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":79}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":79}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":94}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":94}}}
[server] Got a method textDocument/hover
[server] processing took 0.046968460083ms
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":104,"character":94}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":105,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":123,"character":66}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":139,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":145,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 350, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":56}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 355, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":34}}}
[server] Got a method textDocument/definition
[server] processing took 0.00381469726562ms
Sending response {"id": 357, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":154},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":155},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":67}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":156},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":157},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in9\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":223}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":51},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 360, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":158},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in9\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":51}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":159},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":160},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":126,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 363, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":68}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 364, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":161},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":162},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":69}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":92}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":92}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":163},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x)) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":164},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x)) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":93}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0128746032715ms
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":96}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 371, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":96}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":93}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":93}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":165},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":166},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":94}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00619888305664ms
Sending response {"id": 377, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":68}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.132083892822ms
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":68}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":167},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n(List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.018835067749ms
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":168},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":1}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":169},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n  (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":170},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n   (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":171},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n    (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":172},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n     (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":173},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":174},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n       (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":175},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n        (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":176},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n         (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":177},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":178},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n           (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":179},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n            (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":180},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n             (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":181},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n              (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":182},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n               (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":183},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":184},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                 (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":185},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                  (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":186},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                   (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":187},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                    (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":188},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                     (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":189},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":190},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                       (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":191},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                        (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":192},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                         (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":193},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":194},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                           (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":195},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                            (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":196},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                             (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":197},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                              (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":198},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                               (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":199},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":200},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                 (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":201},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                  (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":202},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                   (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":203},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                    (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":204},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                     (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":205},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":206},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                       (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":207},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                        (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":208},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                         (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":209},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":210},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                           (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":211},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                            (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":212},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                             (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":213},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                              (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":214},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                               (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":215},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":216},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                 (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":217},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                  (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":218},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                   (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":219},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                    (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":220},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                     (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":221},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":222},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                       (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":223},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                        (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":224},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                         (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":225},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":226},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                           (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":227},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                            (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":228},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                             (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":229},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                              (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":230},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                               (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":231},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 388, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":232},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":87}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":87}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":233},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                   x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":67}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":234},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                    x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 393, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":235},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                     x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":236},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                      x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":237},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                       x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":238},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":239},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                         x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":240},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                          x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":241},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":242},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                            x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":243},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                             x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":244},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                              x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":245},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                               x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":79}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 394, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":246},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                              x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":247},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                            x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":76}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":248},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                          x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 396, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":249},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":75}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":76}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 402, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0700950622559ms
Sending response {"id": 403, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":250},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n(fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 405, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":251},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":1}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":252},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n  (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":253},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n   (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":254},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n    (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":255},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n     (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":256},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n      (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":257},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n       (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":258},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n        (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":259},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n         (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":260},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n          (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":261},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n           (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":262},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n            (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":263},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n             (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":264},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n              (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":265},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n               (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":266},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":267},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                 (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":268},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                  (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":269},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                   (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":270},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                    (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":271},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                     (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":272},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                                 (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 408, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 410, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":64}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":273},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                                (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":274},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                              (List.nth !book_files \n                                                                           x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":62}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":75}}}
[server] Got a method textDocument/hover
[server] processing took 0.0288486480713ms
Sending response {"id": 415, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":75}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":275},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                              (List.nth !book_files \n                                                                          x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 417, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":276},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                              (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":72}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":62}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 419, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":62}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 420, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":277},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                            (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":278},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                          (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":279},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                        (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":280},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                      (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":281},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                    (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":282},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                  (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":283},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                                (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":284},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                              (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":285},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                            (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":286},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                          (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":287},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                        (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":288},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                      (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":289},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                    (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":290},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                  (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":291},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                                (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":292},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                              (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":293},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                            (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":294},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                          (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":295},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                        (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":296},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":297},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                    (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":298},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                  (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":299},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":300},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n              (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":301},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n            (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":302},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n          (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":303},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n        (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":304},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n      (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":305},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n    (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":306},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n  (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 426, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":307},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n(List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":308},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":66}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":309},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.'(List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 429, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":310},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":66}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":72}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":72}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 432, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":311},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                                      x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":312},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                                    x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":313},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                                  x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":314},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                                x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":315},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                              x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":316},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                            x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":60}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 433, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":317},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                          x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":318},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":319},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                      x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":320},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                    x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":321},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                  x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":322},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                                x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":323},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                              x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":324},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                            x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":325},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                          x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":326},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":327},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                      x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":328},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                    x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":329},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                  x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":330},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                                x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":331},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                              x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":332},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                            x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":333},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                          x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":334},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":335},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                      x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":336},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                    x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":337},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                  x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":338},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n                x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":339},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n              x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":340},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n            x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":341},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n          x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":342},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n        x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":343},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n      x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":344},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n    x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":345},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \n  x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":346},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files \nx))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":347},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":348},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_filesx))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":87}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 434, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":349},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":435,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":88}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":436,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 436, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":437,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0259876251221ms
Sending response {"id": 437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":438,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 438, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":350},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd(String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":439,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 439, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":351},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n                        (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":440,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":352},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n                      (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":353},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n                    (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":354},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n                  (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":355},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n                (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":356},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n              (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":357},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n            (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":358},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n          (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":359},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n        (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":360},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n      (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":361},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n    (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":362},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n  (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":363},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd\n(String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":441,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 441, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":364},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd(String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":442,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 442, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":365},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":443,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 443, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":444,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":66}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 444, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":445,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":66}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 445, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":366},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                      (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":446,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 446, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":447,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 447, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":448,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Sending response {"id": 448, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":367},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                    (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":368},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                  (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":369},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n                (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":370},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n              (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":371},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n            (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":372},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n          (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":373},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n        (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":374},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n      (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":375},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n    (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":376},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n  (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":377},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l \n(fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":449,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 449, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":378},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":450,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":127,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 450, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":451,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 451, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":379},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                       (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":452,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 452, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":380},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                        (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":453,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 453, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":381},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                         (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":382},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":383},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                           (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":384},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                            (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":385},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                             (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":386},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                              (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":454,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 454, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":387},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                               (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":455,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 455, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":388},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":389},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                 (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":390},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                  (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":391},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                   (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":392},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                    (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":393},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                     (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":394},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                      (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":395},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                       (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":396},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                        (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":397},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                         (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":398},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.' \n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":456,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 456, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":457,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":22}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 457, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":458,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00691413879395ms
Sending response {"id": 458, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":399},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":459,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00715255737305ms
Sending response {"id": 459, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":460,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 460, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":461,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 461, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":462,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":133,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 462, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":463,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":133,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 463, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":464,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":138,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 464, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":465,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":139,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 465, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":466,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":146,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 466, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":467,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":145,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 467, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":468,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00381469726562ms
Sending response {"id": 468, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":469,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 469, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":470,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":128,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 470, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":471,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 471, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":472,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":130,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 472, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":473,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":129,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 473, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":474,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":74,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 474, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":475,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 475, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":476,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 476, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":477,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 477, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":478,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":11,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 478, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":479,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":12,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 479, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":480,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":16,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 480, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":481,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":18,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 481, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":482,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":18,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 482, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":483,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":19,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 483, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":484,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":21,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 484, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":485,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":17,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00381469726562ms
Sending response {"id": 485, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":486,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":22,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 486, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":487,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":96,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 487, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":488,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":97,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 488, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":489,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":81,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 489, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":490,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 490, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":491,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 491, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":492,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":0}}}
[server] Got a method textDocument/definition
[server] processing took 0.00500679016113ms
Sending response {"id": 492, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":400},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":401},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":402},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":493,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 493, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":494,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":86,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 494, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":403},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":495,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":81,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 495, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":404},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Graph *)\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":496,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":80,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 496, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":497,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 497, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":405},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Graph *)\n\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":498,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":84,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 498, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":406},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Graph *)\n\n\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":499,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":85,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 499, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":500,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":84,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 500, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":407},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Graph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":408},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Graph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":409},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Graph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":501,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":94,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 501, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":502,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":84,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 502, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":503,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 503, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":504,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 504, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":410},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Graph *)\n\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":505,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 505, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":506,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":90,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.00476837158203ms
Sending response {"id": 506, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":507,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":86,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 507, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":508,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":86,"character":13}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 508, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":411},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Graph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":509,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 509, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":510,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":86,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0269412994385ms
Sending response {"id": 510, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":511,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 511, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":512,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 512, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":412},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: EGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":513,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 513, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":413},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: ExGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":514,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 514, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":414},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: ExpGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":360}}
Read message 
{"jsonrpc":"2.0","id":515,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 515, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":415},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: ExpoGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":515}}
Read message 
{"jsonrpc":"2.0","id":516,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 516, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":416},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: ExporGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":516}}
Read message 
{"jsonrpc":"2.0","id":517,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 517, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":417},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: ExportGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":517}}
Read message 
{"jsonrpc":"2.0","id":518,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":17},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 518, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":418},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export Graph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":519,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.028133392334ms
Sending response {"id": 519, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":419},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export RGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":520,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 520, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":420},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export Graph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":521,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 521, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":421},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export aGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":422},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export anGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":423},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export andGraph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":518}}
Read message 
{"jsonrpc":"2.0","id":522,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Sending response {"id": 522, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":424},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":523,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 523, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":524,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0631809234619ms
Sending response {"id": 524, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":425},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph R*)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":426},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Re*)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":427},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Res*)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":522}}
Read message 
{"jsonrpc":"2.0","id":525,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":31},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 525, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":428},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Resu*)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":525}}
Read message 
{"jsonrpc":"2.0","id":526,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":32},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 526, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":429},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Resul*)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":526}}
Read message 
{"jsonrpc":"2.0","id":527,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":33},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Sending response {"id": 527, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":430},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Result*)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":527}}
Read message 
{"jsonrpc":"2.0","id":528,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":34},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 528, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":431},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results*)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":528}}
Read message 
{"jsonrpc":"2.0","id":529,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":35},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 529, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":530,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 530, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":432},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":531,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 531, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":532,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":82,"character":33}}}
[server] Got a method textDocument/definition
[server] processing took 0.00596046447754ms
Sending response {"id": 532, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":533,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00619888305664ms
Sending response {"id": 533, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":534,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00810623168945ms
Sending response {"id": 534, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":535,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 535, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":536,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":80,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 536, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":537,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":80,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0360012054443ms
Sending response {"id": 537, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":538,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":79,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 538, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":539,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.245809555054ms
Sending response {"id": 539, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":540,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Sending response {"id": 540, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":541,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Sending response {"id": 541, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":542,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":9,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 542, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":543,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 543, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":544,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 544, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":545,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 545, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":546,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Sending response {"id": 546, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":433},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantas.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":434},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fanta.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":435},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fant.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":436},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fan.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":437},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fa.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":547,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 547, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":438},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"F.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":548,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 548, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":439},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \".txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":549,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 549, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":440},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"S.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":441},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Sc.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":442},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Sci.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":529}}
Read message 
{"jsonrpc":"2.0","id":550,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 550, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":443},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Scie.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":550}}
Read message 
{"jsonrpc":"2.0","id":551,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":25},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 551, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":444},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Scien.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":551}}
Read message 
{"jsonrpc":"2.0","id":552,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":26},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 552, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":445},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Scienc.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":552}}
Read message 
{"jsonrpc":"2.0","id":553,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 553, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":446},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":553}}
Read message 
{"jsonrpc":"2.0","id":554,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Sending response {"id": 554, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":447},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science .txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":555,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 555, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":448},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science F.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":556,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 556, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":449},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science Fi.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":450},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science Fic.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":554}}
Read message 
{"jsonrpc":"2.0","id":557,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":32},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 557, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":451},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science Fict.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":557}}
Read message 
{"jsonrpc":"2.0","id":558,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":33},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 558, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":452},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science Ficti.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":558}}
Read message 
{"jsonrpc":"2.0","id":559,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":34},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 559, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":453},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science Fictio.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":559}}
Read message 
{"jsonrpc":"2.0","id":560,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":35},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 560, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":454},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Science Fiction.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":560}}
Read message 
{"jsonrpc":"2.0","id":561,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":36},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.014066696167ms
Sending response {"id": 561, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":562,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 562, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":563,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 563, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":564,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 564, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":565,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 565, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":566,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0350475311279ms
Sending response {"id": 566, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":567,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 567, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":568,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 568, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":569,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Sending response {"id": 569, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":570,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 570, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":571,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.00381469726562ms
Sending response {"id": 571, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":572,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":12,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 572, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":573,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":5,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 573, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":574,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":5,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 574, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":575,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":9,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 575, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":576,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 576, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":577,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 577, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":578,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 578, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":579,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":12,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 579, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":580,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":11,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0278949737549ms
Sending response {"id": 580, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":581,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":5,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 581, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":582,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":12,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 582, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":583,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":9,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 583, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":584,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":5,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 584, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":585,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":18,"character":37}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 585, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":586,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":18,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 586, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":587,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":18,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0820159912109ms
Sending response {"id": 587, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":588,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":13,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 588, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":589,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":13,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 589, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":590,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":14,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 590, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":591,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":14,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 591, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":592,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":15,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 592, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":593,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":17,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 593, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":594,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":12,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 594, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":595,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 595, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":596,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":31,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 596, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":597,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 597, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":598,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 598, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":599,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":6,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 599, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":455},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfiction.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":600,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":6,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 600, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":601,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 601, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":602,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":10,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 602, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":603,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":11,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 603, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":604,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 604, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":605,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 605, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":456},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfictio.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":457},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonficti.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":458},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfict.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":459},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfic.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":460},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfi.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":461},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonf.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":462},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Non.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":463},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"No.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":464},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"N.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":606,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 606, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":465},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \".txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":607,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 607, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":466},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"F.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":467},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fa.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":468},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fan.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":561}}
Read message 
{"jsonrpc":"2.0","id":608,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0169277191162ms
Sending response {"id": 608, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":469},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fant.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":608}}
Read message 
{"jsonrpc":"2.0","id":609,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":25},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 609, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":470},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fanta.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":609}}
Read message 
{"jsonrpc":"2.0","id":610,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":26},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 610, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":471},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantas.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":610}}
Read message 
{"jsonrpc":"2.0","id":611,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 611, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":472},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantasy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":611}}
Read message 
{"jsonrpc":"2.0","id":612,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 612, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":613,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 613, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":614,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 614, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":615,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 615, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":616,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 616, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":617,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":7,"character":25}}}
[server] Got a method textDocument/definition
[server] processing took 0.0109672546387ms
Sending response {"id": 617, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":618,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00786781311035ms
Sending response {"id": 618, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":619,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00786781311035ms
Sending response {"id": 619, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":620,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":15,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 620, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":621,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":15,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 621, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":622,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 622, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":623,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 623, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":473},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fantas.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":474},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fanta.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":475},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fant.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":476},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fan.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":477},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Fa.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":478},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"F.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":624,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 624, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":479},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \".txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":625,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 625, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":480},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"N.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":481},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"No.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":482},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Non.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":612}}
Read message 
{"jsonrpc":"2.0","id":626,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 626, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":483},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonf.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":626}}
Read message 
{"jsonrpc":"2.0","id":627,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":25},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 627, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":484},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfi.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":627}}
Read message 
{"jsonrpc":"2.0","id":628,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":26},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 628, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":485},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfic.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":628}}
Read message 
{"jsonrpc":"2.0","id":629,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 629, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":486},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfict.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":629}}
Read message 
{"jsonrpc":"2.0","id":630,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 630, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":487},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonficti.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":630}}
Read message 
{"jsonrpc":"2.0","id":631,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":29},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 631, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":488},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfictio.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":631}}
Read message 
{"jsonrpc":"2.0","id":632,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":30},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 632, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":489},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfiction.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":632}}
Read message 
{"jsonrpc":"2.0","id":633,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":31},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 633, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":634,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 634, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":635,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":28}}}
[server] Got a method textDocument/definition
[server] processing took 0.00905990600586ms
Sending response {"id": 635, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":636,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 636, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":637,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 637, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":490},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfictio.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":491},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonficti.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":492},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfict.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":493},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfic.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":494},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonfi.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":495},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Nonf.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":496},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Non.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":497},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"No.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":498},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"N.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":638,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 638, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":499},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \".txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":639,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 639, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":500},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"C.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":501},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Co.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":502},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Com.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":633}}
Read message 
{"jsonrpc":"2.0","id":640,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 640, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":503},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Come.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":640}}
Read message 
{"jsonrpc":"2.0","id":641,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":25},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 641, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":504},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comed.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":641}}
Read message 
{"jsonrpc":"2.0","id":642,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":26},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0219345092773ms
Sending response {"id": 642, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":505},"contentChanges":[{"text":"open Plplot\n\n(*PART 1: Extract information from files*)\n\n(* List of string lists, each of which contain all the words in a single book *)\nlet all_word_lists = ref []\n\n(* A text file with all the file paths to each book's .txt file *)\nlet file_of_files = \"Comedy.txt\"\n\n(* List of all the books' file paths *)\nlet book_files = ref []\n\n(* Read in one char at a time and split at whitespace to form new words,\n   operates on the text for a single book\n *)\nlet make_string (s : string) : string list =\n  let whitespace = [' '; '\\n'; '\\r'] in\n  let next_file_channel = open_in s in\n  let word_list = ref [] in\n  let next_word = ref \"\" in\n  try\n  while true; do\n    let next_char = input_char next_file_channel in\n    if List.mem next_char whitespace\n      then (word_list := !next_word :: !word_list; next_word := \"\")\n    else next_word := !next_word ^ (Char.escaped next_char)\n    done;\n    !next_word :: !word_list;\n   with End_of_file -> close_in next_file_channel; !next_word :: !word_list ;;\n\n(* Goes through main text file, stores all the book file names,\n  and gives the each book's file path to make_string\n *)\nlet take_input =\n  let ic = open_in file_of_files in\n  try\n    while true; do\n      book_files := !book_files @ [input_line ic]\n    done\n  with End_of_file -> close_in ic ;\n  all_word_lists := List.map make_string !book_files ;;\n\n\n(*PART 2: Parse strings*)\n\n(* A list of all characters we want to discard, including punctuation, symbols,\n   and numbers, which have ASCII codes 33-64, and 91-96\n *)\nlet to_discard = List.init 32 (fun i -> Char.chr (i + 33))\n                 @ List.init 6 (fun k -> Char.chr (k + 91)) ;;\n\nlet process_book (lst : string list) : string list =\n  let process_word (str : string) : string =\n    let lowercase_str = String.lowercase_ascii str in\n    List.fold_right (fun c s -> String.concat  \"\" (String.split_on_char c s))\n                    to_discard lowercase_str in\n    List.fold_right (fun s l -> (process_word s) :: l) lst [] ;;\n\nlet count_freqs (lst : string list) : (string, int) Hashtbl.t =\n  let frequencies = Hashtbl.create 3 in\n  let add (s : string) : unit =\n    if Hashtbl.mem frequencies s\n      then Hashtbl.replace frequencies s (succ (Hashtbl.find frequencies s))\n    else Hashtbl.add frequencies s 1 in\n  List.iter add lst;\n  Hashtbl.remove frequencies \"\";\n  frequencies ;;\n\nlet count_all (master_lst : string list list) : (string, int) Hashtbl.t list =\n  List.map (fun book -> count_freqs (process_book book)) master_lst ;;\n\nlet rank_book (tbl : (string, int) Hashtbl.t) : (string * int * int) list =\n  let compare_word_freq (_, f1 : string * int) (_, f2 : string * int) : int =\n    ~-(compare f1 f2) in\n  List.mapi (fun i (w,f) -> w, f, i+1 )\n            (List.sort compare_word_freq\n                       (Hashtbl.fold (fun w f acc -> (w, f) :: acc) tbl [])) ;;\n\nlet rank_all (all_words : string list list) : (string * int * int) list list =\n  List.map rank_book (count_all all_words) ;;\n\n(* Part 3: Export and Graph Results *)\n\n(*adijfkas;d*)\nlet nice_lst = rank_all !all_word_lists\n\n(* Writes word frequency rankings to different files for each book *)\nlet export_results =\n  let export_book (i : int) (file_name : string) : unit =\n    let oc = open_out (\"Ranking of \" ^ file_name) in\n    List.iter (fun (w, f, r) -> Printf.fprintf oc \"%d: %s  %d\\n\" r w f)\n              (List.nth nice_lst i);\n    close_out oc in\n  List.iteri export_book !book_files ;;\n\n(* Set up plot boundaries, orientation, and labels; initialize *)\nlet xmin = 0.0 in\nlet xmax = 5.0 in\nlet ymin = 0.0 in\nlet ymax = 5.0 in\nplsdiori 1.0;\nplinit ();\nplenv xmin xmax ymin ymax 0 0 ;\npllab \"log of rank\" \"log of frequency\" (\"Zipf's Law for \" ^ (List.hd (String.split_on_char '.' file_of_files)));\n\n(* Plot each point as log of rank and frequency with plstring, and save\n   the last point in order to connect the dots. Change color with each book\n *)\nlet oldx = ref 0. in\nlet oldy = ref 0. in\nlet colorer = ref 3 in\nlet plotter ((w, f, r) : (string * int * int)) : unit =\n  plcol0 !colorer;\n  let rlog = log10(float_of_int r) in\n  let flog = log10(float_of_int f) in\n  plstring [|rlog|] [|flog|] \"#(728)\";\n  (if !oldy <> 0. then pljoin !oldx !oldy rlog flog;\n  oldx := rlog;\n  oldy := flog;) in\n  List.iter (fun lst -> List.iter plotter lst; colorer := !colorer + 1;) nice_lst ;;\n\n  (* Plplot has a lot of options for the pllegend function, so these are all\n     variables that set up the legend followed by running pllegend\n   *)\nlet l = List.length !book_files in\nlet text_colors = Array.init l (fun x -> x + 3) in\nlet text = Array.init l (fun x -> List.hd (String.split_on_char '.'\n                                          (List.nth !book_files x))) in\nlet line_colors = Array.init l (fun x -> x + 3) in\nlet line_styles = Array.make l 1 in\nlet line_widths = Array.make l 1.0 in\nlet symbol_colors = Array.init l (fun x -> x + 3) in\nlet opt_array = Array.make l [PL_LEGEND_LINE; PL_LEGEND_SYMBOL] in\nlet symbol_scales = Array.make l 1.0 in\nlet symbol_numbers = Array.make l 3 in\nlet symbols = Array.make l \"#(728)\" in\npllegend [PL_LEGEND_BOUNDING_BOX] []\n         0.0 0.0 0.1 15\n         1 1 0 0\n         opt_array\n         1.0 1.0 2.0\n         1.0 text_colors text\n         [||] [||] [||] [||]\n         line_colors line_styles line_widths\n         symbol_colors symbol_scales symbol_numbers symbols ;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":642}}
Read message 
{"jsonrpc":"2.0","id":643,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 643, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":644,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":31}}}
[server] Got a method textDocument/definition
[server] processing took 0.00405311584473ms
Sending response {"id": 644, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":645,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":8,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 645, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":646,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00405311584473ms
Sending response {"id": 646, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":647,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00691413879395ms
Sending response {"id": 647, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":648,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":9,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 648, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":649,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Sending response {"id": 649, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml","version":1}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":650,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":6,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 650, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":651,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":6,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 651, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":652,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/aalias/cs51psets/CS51-final-project-gutenberg/gutenberg.ml"},"position":{"line":1,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 652, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
